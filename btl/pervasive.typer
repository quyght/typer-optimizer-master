%%% pervasive.typer --- Always available definitions

%%      Copyright (C) 2011-2017  Free Software Foundation, Inc.
%%
%% Author: Pierre Delaunay <pierre.delaunay@hec.ca>
%% Keywords: languages, lisp, dependent types.
%%
%% This file is part of Typer.
%%
%% Typer is free software; you can redistribute it and/or modify it under the
%% terms of the GNU General Public License as published by the Free Software
%% Foundation, either version 3 of the License, or (at your option) any
%% later version.
%%
%% Typer is distributed in the hope that it will be useful, but WITHOUT ANY
%% WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
%% FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
%% more details.
%%
%% You should have received a copy of the GNU General Public License along
%% with this program.  If not, see <http://www.gnu.org/licenses/>.

%%% Commentary:

%% This file includes all kinds of predefined types and functions that are
%% generally useful.  It plays a similar role to builtins.typer and is read
%% right after that one.  The main reason for the separation into
%% 2 different files, is that for technical reasons, one cannot use macros
%% in builtins.typer.

%%% Code:

%%%% `Option` type

Option = typecons (Option (a : Type)) (none) (some a);
some = datacons Option some;
none = datacons Option none;

%%% Good 'ol combinators

I : (a : Type) ≡> a -> a;
I = lambda a ≡> lambda x -> x;

K : (a : Type) ≡> a -> (b : Type) ≡> b -> a;
K = lambda a ≡> lambda x -> lambda b ≡> lambda y -> x;

%%%% List functions

List_length : (a : Type) ≡> List a -> Int;
List_length = lambda a ≡> lambda xs -> case xs
  | nil => 0
  | cons hd tl =>
      (1 + (List_length tl));

List_reverse : (a : Type) ≡> List a -> List a -> List a;
List_reverse = lambda a ≡> lambda l -> lambda t -> case l
  | nil => t
  | cons hd tl => List_reverse tl (cons hd t);

List_concat : (a : Type) ≡> List a -> List a -> List a;
List_concat = lambda a ≡> lambda l -> lambda t ->
  List_reverse (List_reverse l nil) t;

%% ML's typical `head` function is not total, so can't be defined
%% as-is in Typer.  There are several workarounds:
%% - Provide a default value : (a : Type) ≡> a -> List a -> a;
%% - Disallow problem case   : (a : Type) ≡> (l : List a) -> (l != nil) -> a;
%% - Return an Option/Error.
List_head1 : (a : Type) ≡> List a -> Option a;
List_head1 = lambda a ≡> lambda xs -> case xs
  | nil => none
  | cons hd tl => some hd;

List_head : (a : Type) ≡> a -> List a -> a;
List_head = lambda a ≡> lambda x xs -> case xs
  | cons x _ => x
  | nil => x;

List_tail : (a : Type) ≡> List a -> List a;
List_tail = lambda a ≡> lambda xs -> case xs
  | nil => nil
  | cons hd tl => tl;

List_map : (a : Type) ≡> (b : Type) ≡> (a -> b) -> List a -> List b;
List_map = lambda a b ≡> lambda f xs -> case xs
  | nil => nil
  | cons x xs => cons (f x) (List_map f xs);

List_foldl : (a : Type) ≡> (b : Type) ≡> (a -> b -> a) -> a -> List b -> a;
List_foldl = lambda a b ≡> lambda f i xs -> case xs
  | nil => i
  | cons x xs => List_foldl f (f i x) xs;

%%%% Quasi-Quote macro

%%   f = (quote (uquote x) * x) (node _*_ [(Sexp_node unquote "x") "x"])
%%
%%   f = Sexp_node "*" cons (x, cons (Sexp_symbol "x") nil))
%%
%%     =>       x

%% An Sexp which we use to represents an error.
Sexp_error = Sexp_symbol "<error>";

quote1 : Sexp -> Sexp;
quote1 x = let k = K x;
               node op y = case (Sexp_eq op (Sexp_symbol "uquote"))
                 | true  => List_head Sexp_error y
                 | false => Sexp_node (quote1 op) (List_map quote1 y)
           in Sexp_dispatch x node k k k k k;

%% quote definition
quote = macro (lambda x -> quote1 (List_head Sexp_error x));

%%%% The `type` declaration macro

%% build a declaration
%% var-name = value-expr;
make-decl : Sexp -> Sexp -> Sexp;
make-decl var-name value-expr =
  Sexp_node (Sexp_symbol "_=_")
            (cons var-name
                  (cons value-expr nil));

chain-decl : Sexp -> Sexp -> Sexp;
chain-decl a b =
  Sexp_node (Sexp_symbol "_;_") (cons a (cons b nil));

%% build datacons
%% ctor-name = datacons type-name ctor-name;
make-cons : Sexp -> Sexp -> Sexp;
make-cons ctor-name type-name =
  make-decl ctor-name
            (Sexp_node (Sexp_symbol "datacons")
                       (cons type-name
                             (cons ctor-name nil)));

%% buil type annotation
%% var-name : type-expr;
make-ann : Sexp -> Sexp -> Sexp;
make-ann var-name type-expr =
  Sexp_node (Sexp_symbol "_:_")
            (cons var-name
                  (cons type-expr nil));

type-impl = lambda (x : List Sexp) ->
  %% x follow the mask -> (_|_ Nat zero (succ Nat))
  %%               Type name  --^    ^------^ constructors

  %% Return a list contained inside a node sexp
  let knil = K nil;
      kerr = K Sexp_error;

      get-list : Sexp -> List Sexp;
      get-list node = Sexp_dispatch node
                                     (lambda op lst -> lst) % Nodes
                                     knil      % Symbol
                                     knil      % String
                                     knil      % Integer
                                     knil      % Float
                                     knil;     % List of Sexp

      %% Get a name (symbol) from a sexp
      %%   - (name t) -> name
      %%   - name -> name
      get-name : Sexp -> Sexp;
      get-name sxp =
        Sexp_dispatch sxp
                       (lambda op _ -> get-name op) % Nodes
                       (lambda _    -> sxp) % Symbol
                       kerr  % String
                       kerr  % Integer
                       kerr  % Float
                       kerr; % List of Sexp

      get-head = List_head Sexp_error;

      %% Get expression
      expr = get-head x;

      %% Expression is  Sexp_node (Sexp_symbol "|") (list)
      %% we only care about the list bit
      lst = get-list expr;

      %% head is (Sexp_node type-name (arg list))
      name = get-head lst;
      ctor = List_tail lst;

      type-name = get-name name;

      %% Create the inductive type definition
      inductive = Sexp_node (Sexp_symbol "typecons")
                            (cons name ctor);

      decl  = make-decl type-name inductive;

      %% Add constructors
      ctors = let for-each : List Sexp -> Sexp -> Sexp;
                  for-each ctr acc = case ctr
                    | cons hd tl =>
                        let acc2 = chain-decl (make-cons (get-name hd)
                                                         type-name)
                                              acc
                        in for-each tl acc2
                    | nil => acc
              in for-each ctor (Sexp_node (Sexp_symbol "_;_") nil)

                          %% return decls
  in chain-decl decl        % inductive type declaration
                ctors;      % constructor declarations


type_ = macro type-impl;

%%%% Backward compatibility

length = List_length;
head = List_head1;
tail = List_tail;

%%%% Logic

%% False should be one of the many empty types.
%% Other common choices are False = ∀a.a and True = ∃a.a.
False = Void;
True = Unit;

Not : Type -> Type;
Not prop = prop -> False;

%% Like Bool, except that it additionally carries the meaning of its value.
Decidable = typecons (Decidable (prop : Type))
                     (true (p ::: prop)) (false (p ::: Not prop));


%%% pervasive.typer ends here.
